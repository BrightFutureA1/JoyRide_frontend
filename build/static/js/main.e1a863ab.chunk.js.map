{"version":3,"sources":["components/Aside.js","components/Footer.js","components/Header.js","components/Joyridefuns.js","components/Main.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Aside","props","react_default","a","createElement","Form_default","handleSubmit","Footer","Header","Joyridefuns","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","joyridefuns","getJoyridefuns","fetch","then","response","json","console","log","catch","error","Component","Main","handleDelete","handleUpdate","components_Joyridefuns","Nav","App","className","components_Header","components_Aside","components_Main","components_Nav","components_Footer","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAYeA,MATf,SAAeC,GACX,OACEC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,aAAcL,EAAMK,iBCGnBC,MARf,SAAgBN,GACZ,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,sBCKOI,MARf,SAAgBP,GACZ,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,0BCoBOK,cAtBd,SAAAA,EAAYR,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMZ,KACDgB,MAAQ,CACZC,YAAa,IAHGR,mFAOjBG,KAAKM,0DAGLC,MAAM,uCACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIC,QAAQC,IAAIF,KACtBG,MAAM,SAAAC,GAAK,OAAIH,QAAQG,MAAMA,sCAGhC,OACEzB,EAAAC,EAAAC,cAAA,gCAlBoBwB,aCcXC,MAbf,SAAc5B,GAAO,IACXiB,EAA4CjB,EAA5CiB,YAAaY,EAA+B7B,EAA/B6B,aAAcC,EAAiB9B,EAAjB8B,aACjC,OACE7B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAC4B,EAAD,CACCd,YAAaA,EACbY,aAAcA,EACdC,aAAcA,MCARE,MARf,SAAahC,GACT,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBCyBO8B,cArBb,SAAAA,EAAYjC,GAAM,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IAChBxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMZ,KACDgB,MAAQ,CACXC,YAAa,IAHCR,wEAOhB,OACER,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,aACbjC,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,CAAMpB,YAAaL,KAAKI,MAAMC,cAC9BhB,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAACoC,EAAD,eAfQC,IAAMb,WCIJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.e1a863ab.chunk.js","sourcesContent":["import React from 'react'\nimport Form from './Form.js'\n\nfunction Aside(props) {\n    return (\n      <aside>\n        <h1>Aside</h1>\n        <Form handleSubmit={props.handleSubmit}/>\n      </aside>\n    )\n}\n\nexport default Aside","import React from 'react'\n\nfunction Footer(props) {\n    return (\n      <footer>\n        <h1>Footer</h1>\n      </footer>\n    )\n}\n\nexport default Footer","import React from 'react'\n\nfunction Header(props) {\n    return (\n      <header>\n        <h1>JoyRideFun</h1>\n      </header>\n    )\n}\n\nexport default Header","import React, { Component } from 'react';\n\nclass Joyridefuns extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tjoyridefuns: []\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tthis.getJoyridefuns()\n\t}\n\tgetJoyridefuns () {\n\t\tfetch('http://localhost:3001/joy_ride_funs')\n\t\t\t.then(response => response.json())\n\t\t\t.then(json => console.log(json))\n      .catch(error => console.error(error))\n\t}\n  render () {\n    return (\n      <h1>JoyRideFuns</h1>\n    )\n  }\n}\n\nexport default Joyridefuns;","import React from 'react'\nimport Joyridefuns from './Joyridefuns.js'\n\nfunction Main(props) {\n  const { joyridefuns, handleDelete, handleUpdate } = props\n    return (\n      <main>\n        <Joyridefuns\n         joyridefuns={joyridefuns}\n         handleDelete={handleDelete}\n         handleUpdate={handleUpdate}\n        />\n      </main>\n    )\n}\n\nexport default Main","import React from 'react'\n\nfunction Nav(props) {\n    return (\n      <nav>\n        <h1>Nav</h1>\n      </nav>\n    )\n}\n\nexport default Nav","import React from 'react'\nimport Aside from './components/Aside.js'\nimport Footer from './components/Footer.js'\nimport Header from './components/Header.js'\nimport Main from './components/Main.js'\nimport Nav from './components/Nav.js'\n// import App from './App.js'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      joyridefuns: [],\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className='container'>\n          <Header />\n          <Aside />\n          <Main joyridefuns={this.state.joyridefuns}/>\n          <Nav />\n          <Footer />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}